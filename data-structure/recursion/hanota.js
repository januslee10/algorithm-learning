// 在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:
// (1) 每次只能移动一个盘子;
// (2) 盘子只能从柱子顶端滑出移到下一根柱子;
// (3) 盘子只能叠在比它大的盘子上。

// 请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。

// 你需要原地修改栈。
// 输入：A = [2, 1, 0], B = [], C = []
//  输出：C = [2, 1, 0]
// 输入：A = [1, 0], B = [], C = []
// 输出：C = [1, 0]
function hanota(A, B, C) {
  let n = A.length
  let move = function (m, a, b, c) {
    if (m === 1) { // 当只有一个时直接加到c中
      c.push(a.pop())
    } else {
      move(m - 1, a, c, b) // 将 a 上的 n - 1 个 通过 c 移到 b
      c.push(a.pop()) // 把 a 中剩下的一个直接放到 c
      move(m - 1, b, a, c) // 在把 b 上的 n - 1 个 通过 a 放到 c
    }
  }
  move(n, A, B, C)
}

console.log('--------测试----------')
let a = [2, 1, 0];
let b = [];
let c = [];
hanota(a, b, c)
console.log('结果a', a)
console.log('结果b', b)

console.log('结果c', c)